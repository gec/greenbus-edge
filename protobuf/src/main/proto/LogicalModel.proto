syntax = "proto3";

package edge;

import "Value.proto";

option java_package = "io.greenbus.edge.api.proto";
option java_multiple_files = true;


message LatestKeyValueDescriptor {
    bool placeholder = 1;
}
message TimeSeriesValueDescriptor {
    bool placeholder = 1;
}
message EventTopicValueDescriptor {
    bool placeholder = 1;
}
message ActiveSetValueDescriptor {
    bool placeholder = 1;
}

message DataKeyDescriptor {
    repeated IndexKeyValue indexes = 1;
    repeated MetadataKeyValue metadata = 2;

    oneof value_types {
        LatestKeyValueDescriptor latest_key_value = 3;
        TimeSeriesValueDescriptor time_series_value = 4;
        EventTopicValueDescriptor event_topic_value = 5;
        ActiveSetValueDescriptor active_set_value = 6;
    }
}

message OutputKeyDescriptor {
    repeated IndexKeyValue indexes = 1;
    repeated MetadataKeyValue metadata = 2;
}

message IndexKeyValue {
    Path key = 1;
    edge.data.IndexableValue value = 2;
}
message MetadataKeyValue {
    Path key = 1;
    edge.data.Value value = 2;
}
message DataKeyValue {
    Path key = 1;
    DataKeyDescriptor value = 2;
}
message OutputKeyValue {
    Path key = 1;
    OutputKeyDescriptor value = 2;
}

message EndpointDescriptor {
    repeated IndexKeyValue indexes = 1;
    repeated MetadataKeyValue metadata = 2;
    repeated DataKeyValue data_key_set = 3;
    repeated OutputKeyValue output_key_set = 4;
}


message Path {
    repeated string part = 1;
}

message UUIDEndpointId {
    UUID uuid = 1;
    Path name = 2;
}

message EndpointId {
    Path name = 1;
    /*oneof id_types {
        Path named_id = 1;
        UUIDEndpointId uuid_id = 2;
    }*/
}


message EndpointPath {
    EndpointId endpoint_id = 1;
    Path key = 2;
}

message OptionalString {
    string value = 1;
}
message OptionalBool {
    bool value = 1;
}
message OptionalUInt64 {
    uint64 value = 1;
}

message UUID {
    fixed64 low = 1;
    fixed64 high = 2;
}

message OutputKeyStatus {
    UUID sequence_session = 1;
    uint64 sequence = 2;
    edge.data.Value value = 3;
}

message OutputParams {
    UUID sequence_session = 1; // optional
    OptionalUInt64 sequence = 2; // optional
    edge.data.Value compare_value = 3; // optional
    edge.data.Value output_value = 4; // optional
}

message OutputSuccess {
    edge.data.Value result = 1; // optional
}
message OutputFailure {
    string message = 1;
}

message OutputResult {
    oneof result {
        OutputSuccess success = 1;
        OutputFailure failure = 2;
    }
}

message IndexSpecifier {
    Path key = 1;
    edge.data.IndexableValue value = 2;
}
