/**
 * Copyright 2011-2016 Green Energy Corp.
 *
 * Licensed to Green Energy Corp (www.greenenergycorp.com) under one or more
 * contributor license agreements. See the NOTICE file distributed with this
 * work for additional information regarding copyright ownership. Green Energy
 * Corp licenses this file to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
syntax = "proto3";

package greenbus.client;


option java_package = "io.greenbus.edge.proto";
//option java_outer_classname = "EdgeProto";
option java_multiple_files = true;


message SequencedValue {
    uint64 sequence = 1;
    Value value = 2;
}

message TimeSeriesSample {
    uint64 time = 1;
    SampleValue value = 2;
}

message SequencedTimeSeriesValue {
    uint64 sequence = 1;
    TimeSeriesSample sample = 2;
}

message TimeSeriesUpdate {
    repeated SequencedTimeSeriesValue values = 1;
}

message TimeSeriesState {
    repeated SequencedTimeSeriesValue values = 1;
}


// TODO: make these
message DataValueNotification {
    oneof notifications {
        DataValueState state = 1;
        DataValueUpdate update = 2;
    }
}

message DataValueState {
    oneof state {
        SequencedValue sequenced_value_state = 1;
        TimeSeriesState time_series_state = 2;
    }
}
message DataValueUpdate {
    oneof update {
        SequencedValue sequenced_value_update = 1;
        TimeSeriesUpdate time_series_update = 2;
    }
}

message OutputValueStatus {
    SessionId session_id = 1;
    uint64 sequence = 2;
    Value value = 3;
}


message PublisherOutputValueStatus {
    uint64 sequence = 1;
    Value value = 2; // optional
}

message PublisherOutputValue {
    OptionalUInt64 sequence = 1;
    Value compare_value = 2; // optional
    Value output_value = 3; // optional
}


message Path {
    repeated string part = 1;
}

message NamedEndpointId {
    string name = 1;
}

message EndpointId {
    NamedEndpointId named_id = 1;
}

message EndpointPath {
    EndpointId endpoint_id = 1;
    Path key = 2;
}

message ClientSubscriptionParams {
    repeated Path endpoint_set_prefix = 1;
    repeated EndpointId info_subscription = 2;
    repeated EndpointPath data_subscription = 3;
    repeated EndpointPath output_subscription = 4;
}

message PersistenceSessionId {
    UUID persistence_id = 1;
    uint64 persistence_sequence = 2;
}

message SessionId {
    PersistenceSessionId persistence_id = 1;
}

message LatestKeyValueDescriptor {
    bool placeholder = 1;
}
message TimeSeriesValueDescriptor {
    bool placeholder = 1;
}

message DataKeyDescriptor {
    repeated IndexKeyValue indexes = 1;
    repeated MetadataKeyValue metadata = 2;

    oneof value_types {
        LatestKeyValueDescriptor latest_key_value = 3;
        TimeSeriesValueDescriptor time_series_value = 4;
    }
}

message OutputKeyDescriptor {
    repeated IndexKeyValue indexes = 1;
    repeated MetadataKeyValue metadata = 2;
}

message IndexKeyValue {
    Path key = 1;
    IndexableValue value = 2;
}
message MetadataKeyValue {
    Path key = 1;
    Value value = 2;
}
message DataKeyValue {
    Path key = 1;
    DataKeyDescriptor value = 2;
}
message OutputKeyValue {
    Path key = 1;
    OutputKeyDescriptor value = 2;
}

message EndpointDescriptor {
    repeated IndexKeyValue indexes = 1;
    repeated MetadataKeyValue metadata = 2;
    repeated DataKeyValue data_key_set = 3;
    repeated OutputKeyValue output_key_set = 4;
}

message EndpointSetNotification {
    bool placeholder = 1;
}

message EndpointDescriptorNotification {
    EndpointId endpoint_id = 1;
    EndpointDescriptor endpoint_descriptor = 2;
    uint64 sequence = 3;
}

message KeyedDataValueState {
    Path key = 1;
    DataValueState value = 2;
}
message KeyedDataValueUpdate {
    Path key = 1;
    DataValueUpdate value = 2;
}
message KeyedPublisherOutputValueStatus {
    Path key = 1;
    PublisherOutputValueStatus value = 2;
}
message KeyedPublisherOutputValue {
    Path key = 1;
    PublisherOutputValue value = 2;
}

message EndpointDataNotification {
    EndpointPath key = 1;
    DataValueNotification value = 2;
}

message EndpointOutputStatusNotification {
    EndpointPath key = 1;
    OutputValueStatus value = 2;
}

message ClientSubscriptionNotification {
    repeated EndpointSetNotification endpoint_set_notification = 1;
    repeated EndpointDescriptorNotification descriptor_notification = 2;
    repeated EndpointDataNotification data_notification = 3;
    repeated EndpointOutputStatusNotification output_notification = 4;
}

message ClientSubscriptionParamsMessage {
    ClientSubscriptionParams content = 1;
}
message ClientSubscriptionNotificationMessage {
    ClientSubscriptionNotification content = 1;
}

message EndpointDescriptorRecord {
    EndpointId endpoint_id = 1;
    EndpointDescriptor endpoint_descriptor = 2;
    uint64 sequence = 3;
}

message EndpointPublishSnapshot {
    EndpointDescriptorRecord endpoint_descriptor = 1;
    repeated KeyedDataValueState data_values = 2;
    repeated KeyedPublisherOutputValueStatus output_values = 3;

}

message EndpointPublishMessage {
    EndpointPublishSnapshot snapshot = 1; // optional
    EndpointDescriptorRecord descriptor_update = 2; // optional
    repeated KeyedDataValueUpdate data_updates = 3;
    repeated KeyedPublisherOutputValueStatus output_updates = 4;
}

message PublisherOutputParams {
    OptionalUInt64 sequence = 1; // optional
    Value compare_value = 2; // optional
    Value output_value = 3; // optional
}

message PublisherOutputRequest {
    Path key = 1;
    PublisherOutputParams params = 2;
    uint64 correlation = 3;
}

message OutputSuccess {
    Value result = 1; // optional
}
message OutputFailure {
    string message = 1;
}

message OutputResult {
    oneof result {
        OutputSuccess success = 1;
        OutputFailure failure = 2;
    }
}

message ClientOutputParams {
    SessionId session = 1; // optional
    OptionalUInt64 sequence = 2; // optional
    Value compare_value = 3; // optional
    Value output_value = 4; // optional
}

message ClientOutputRequest {
    EndpointPath key = 1;
    ClientOutputParams params = 2;
    uint64 correlation = 3;
}

message PublisherOutputRequestMessage {
    repeated PublisherOutputRequest requests = 1;
}

message PublisherOutputResponseMessage {
    map<uint64, OutputResult> results = 1;
}

message ClientOutputRequestMessage {
    repeated ClientOutputRequest requests = 1;
}
message ClientOutputResponseMessage {
    map<uint64, OutputResult> results = 1;
}

message SampleValue {
    oneof value_types {
        float float_value = 1;
        double double_value = 2;
        sint32 sint32_value = 3;
        uint32 uint32_value = 4;
        sint64 sint64_value = 5;
        uint64 uint64_value = 6;
        bool bool_value = 7;
    }
}

message IndexableValue {
    oneof value_types {
        float float_value = 1;
        double double_value = 2;
        sint32 sint32_value = 3;
        uint32 uint32_value = 4;
        sint64 sint64_value = 5;
        uint64 uint64_value = 6;
        bool bool_value = 7;
        StringValue string_value = 8;
        BytesValue bytes_value = 9;
        UUID uuid_value = 10;
    }
}

message Value {
    oneof value_types {
        float float_value = 1;
        double double_value = 2;
        sint32 sint32_value = 3;
        uint32 uint32_value = 4;
        sint64 sint64_value = 5;
        uint64 uint64_value = 6;
        bool bool_value = 7;
        StringValue string_value = 8;
        BytesValue bytes_value = 9;
        UUID uuid_value = 10;
        ArrayValue array_value = 11;
        ObjectValue object_value = 12;
    }
}

message UUID {
    fixed64 low = 1;
    fixed64 high = 2;
}

message OptionalString {
    string value = 1;
}
message OptionalBool {
    bool value = 1;
}
message OptionalUInt64 {
    uint64 value = 1;
}

message BytesValue {
    bytes value = 1;
    OptionalString mime_type = 2;
    OptionalBool is_text = 3;
}
message StringValue {
    string value = 1;
    OptionalString mime_type = 2;
}


message ArrayValue {
    repeated Value element = 1;
}
message ObjectValue {
    map<string, Value> fields = 2;
}


/*
message ValueCompose {
    ValueFloat float_value = 1;
    ValueDouble double_value = 2;
    ValueBool bool_value = 3;
    ValueBytes bytes_value = 4;
}

message ValueFloat {
    float value = 1;
}
message ValueDouble {
    double value = 1;
}
message ValueInt32 {
    sint32 value = 1;
}
message ValueUInt32 {
    uint32 value = 1;
}
message ValueInt64 {
    sint64 value = 1;
}
message ValueUInt64 {
    uint64 value = 1;
}
message ValueBool {
    bool value = 1;
}
message ValueString {
    string value = 1;
}
message ValueBytes {
    bytes value = 1;
}
message ValueUUID {
    string value = 1;
}*/